
if (!window.pm) { var pm = {}; }	// TODO: module handling

pm.util = (function(){
	var module = {};

	module.hasPermissionFromTable = function(table, permission, workspace_id) {
		// From the given table, figure out if the user has that
		// permission or not.
		// table: an object of values from the server.
		// permission: the string permission name.
		// workspace_id: if supplied, should be an integer that is the
		//   workspace ID to limit the request to.

		var testKeys = [];
		if(workspace_id) {
			testKeys.push('' + workspace_id + '_' + permission);
		}
		testKeys.push('None_' + permission);

		for(var i = 0; i < testKeys.length; i++) {
			if(table[testKeys[i]]) {
				return true;
			}
		}

		return false;
	}

	module.hasPermission = function(permission, workspace_id) {
		// Uses the global permissions store 'currentUserPermissions'.
		return module.hasPermissionFromTable(currentUserPermissions, permission, workspace_id);
	}

	/**
	 * Parse a date string generated by the pacemaker in ISO-8601 format
	 * (which include microseconds but don't include the timezone, UTC),
	 * and return a moment.js object for arithmetic, formatting, etc.
	 */
	module.parseDate = function(date_string) {
		return moment(date_string + ' +0000', module.date_formats.pacemaker);
	}

	/**
	 * Helper function to format dates from the pacemaker for display.
	 *
	 * Returns an object with names corresponding to the Moment.js methods: fromNow
	 * for a friendly "time ago" string, format for a traditional month-name string,
	 * and calendar for a variable "Yesterday at 6:45 PM" string.
	 */
	module.formatDate = function(date_string) {	
		var retval = {};
		
		var date = module.parseDate(date_string);
		retval.format = date.format(module.date_formats.word);
		retval.calendar = date.calendar();
		retval.fromNow = date.fromNow();
		
		return retval;
	}

	module.date_formats = {
		pacemaker: 'YYYY-MM-DD_HH:mm:ss.______ Z',
		word: 'MMMM Do YYYY, HH:mm:ss Z'
	}

	// number_format from: http://phpjs.org/functions/number_format/
	module.number_format = function(number, decimals, dec_point, thousands_sep) {
		number = (number + '').replace(/[^0-9+\-Ee.]/g, '');
		var n = !isFinite(+number) ? 0 : +number,
		prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
		sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
		dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
		s = '',
		toFixedFix = function (n, prec) {
			var k = Math.pow(10, prec);
			return '' + Math.round(n * k) / k;
		};
		// Fix for IE parseFloat(0.55).toFixed(0) = 0;
		s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
		if (s[0].length > 3) {
			s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
		}
		if ((s[1] || '').length < prec) {
			s[1] = s[1] || '';
			s[1] += new Array(prec - s[1].length + 1).join('0');
		}
		return s.join(dec);
	}

	// From: http://stackoverflow.com/questions/661562/how-to-format-a-float-in-javascript
	module.toFixed = function(value, precision) {
		var power = Math.pow(10, precision || 0);
		return (Math.round(value * power) / power).toFixed(precision);
	}

	return module;
}());

/******
 * Helper functions for Handlebars templates
 */

/**
 * {{#ifPermission 'FOO'}}{{/ifPermission}}
 * TODO: this does not support permissions specific to workspaces
 */
Handlebars.registerHelper('ifPermission', function(conditional, options) {
	if (pm.util.hasPermission(conditional)) {
		return options.fn(this);
	} else {
		return options.inverse(this);
	}
});
